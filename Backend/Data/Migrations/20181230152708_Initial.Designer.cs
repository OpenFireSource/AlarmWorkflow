// <auto-generated />
using System;
using AlarmWorkflow.Backend.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlarmWorkflow.Backend.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20181230152708_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.DispositionedResourceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("EmkResourceId")
                        .IsRequired()
                        .HasColumnName("emkresourceid");

                    b.Property<int>("OperationId")
                        .HasColumnName("operation_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("dispresource");
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.OperationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AlarmAt")
                        .HasColumnName("timestampalarm");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("CustomData")
                        .HasColumnName("customdatajson");

                    b.Property<Guid>("Guid")
                        .HasColumnName("operationguid");

                    b.Property<DateTime>("IncomeAt")
                        .HasColumnName("timestampincome");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnName("acknowledged");

                    b.Property<string>("Loops")
                        .HasColumnName("loopscsv");

                    b.Property<string>("Messenger")
                        .HasColumnName("messenger");

                    b.Property<string>("OperationNumber")
                        .HasColumnName("operationnumber");

                    b.Property<string>("Picture")
                        .HasColumnName("picture");

                    b.Property<string>("Plan")
                        .HasColumnName("plan");

                    b.Property<string>("Priority")
                        .HasColumnName("priority");

                    b.HasKey("Id");

                    b.ToTable("operation");
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.OperationResourceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Equipment")
                        .HasColumnName("equipmentcsv");

                    b.Property<string>("FullName")
                        .HasColumnName("fullname");

                    b.Property<int>("OperationId")
                        .HasColumnName("operation_id");

                    b.Property<string>("Timestamp")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("operationresource");
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.SettingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnName("identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("usersetting");
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.DispositionedResourceData", b =>
                {
                    b.HasOne("AlarmWorkflow.Backend.Data.Types.OperationData", "Operation")
                        .WithMany("DispositionedResources")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.OperationData", b =>
                {
                    b.OwnsOne("AlarmWorkflow.Shared.Core.OperationKeywords", "Keywords", b1 =>
                        {
                            b1.Property<int>("OperationDataId");

                            b1.Property<string>("B")
                                .HasColumnName("keywordb");

                            b1.Property<string>("EmergencyKeyword")
                                .HasColumnName("keywordmisc");

                            b1.Property<string>("Keyword")
                                .HasColumnName("keyword");

                            b1.Property<string>("R")
                                .HasColumnName("keywordr");

                            b1.Property<string>("S")
                                .HasColumnName("keywords");

                            b1.Property<string>("T")
                                .HasColumnName("keywordt");

                            b1.HasKey("OperationDataId");

                            b1.ToTable("operation");

                            b1.HasOne("AlarmWorkflow.Backend.Data.Types.OperationData")
                                .WithOne("Keywords")
                                .HasForeignKey("AlarmWorkflow.Shared.Core.OperationKeywords", "OperationDataId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("AlarmWorkflow.Shared.Core.PropertyLocation", "Einsatzort", b1 =>
                        {
                            b1.Property<int>("OperationDataId");

                            b1.Property<string>("City")
                                .HasColumnName("einsatzortcity");

                            b1.Property<string>("GeoLatLng")
                                .HasColumnName("einsatzortlatlng");

                            b1.Property<double?>("GeoLatitude");

                            b1.Property<double?>("GeoLongitude");

                            b1.Property<string>("Intersection")
                                .HasColumnName("einsatzortintersection");

                            b1.Property<string>("Location")
                                .HasColumnName("einsatzortlocation");

                            b1.Property<string>("Property")
                                .HasColumnName("einsatzortproperty");

                            b1.Property<string>("Street")
                                .HasColumnName("einsatzortstreet");

                            b1.Property<string>("StreetNumber")
                                .HasColumnName("einsatzortstreetnumber");

                            b1.Property<string>("ZipCode")
                                .HasColumnName("einsatzortzipcode");

                            b1.HasKey("OperationDataId");

                            b1.ToTable("operation");

                            b1.HasOne("AlarmWorkflow.Backend.Data.Types.OperationData")
                                .WithOne("Einsatzort")
                                .HasForeignKey("AlarmWorkflow.Shared.Core.PropertyLocation", "OperationDataId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("AlarmWorkflow.Shared.Core.PropertyLocation", "Zielort", b1 =>
                        {
                            b1.Property<int>("OperationDataId");

                            b1.Property<string>("City")
                                .HasColumnName("zielortcity");

                            b1.Property<string>("GeoLatLng")
                                .HasColumnName("zielortlatlng");

                            b1.Property<double?>("GeoLatitude");

                            b1.Property<double?>("GeoLongitude");

                            b1.Property<string>("Intersection")
                                .HasColumnName("zielortintersection");

                            b1.Property<string>("Location")
                                .HasColumnName("zielortlocation");

                            b1.Property<string>("Property")
                                .HasColumnName("zielortproperty");

                            b1.Property<string>("Street")
                                .HasColumnName("zielortstreet");

                            b1.Property<string>("StreetNumber")
                                .HasColumnName("zielortstreetnumber");

                            b1.Property<string>("ZipCode")
                                .HasColumnName("zielortzipcode");

                            b1.HasKey("OperationDataId");

                            b1.ToTable("operation");

                            b1.HasOne("AlarmWorkflow.Backend.Data.Types.OperationData")
                                .WithOne("Zielort")
                                .HasForeignKey("AlarmWorkflow.Shared.Core.PropertyLocation", "OperationDataId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("AlarmWorkflow.Backend.Data.Types.OperationResourceData", b =>
                {
                    b.HasOne("AlarmWorkflow.Backend.Data.Types.OperationData", "Operation")
                        .WithMany("Resources")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
