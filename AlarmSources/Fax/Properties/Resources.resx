<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeginParsingIncomingOperation" xml:space="preserve">
    <value>Begin parsing incoming operation...</value>
  </data>
  <data name="BeginProcessingFaxes" xml:space="preserve">
    <value>Processing '{0}' new faxes...</value>
  </data>
  <data name="CreatedRequiredDirectory" xml:space="preserve">
    <value>Created required directory '{0}'.</value>
  </data>
  <data name="CuneiformDeleteTempFileError" xml:space="preserve">
    <value>Could not delete temporary file '{0}'! You may want to delete them manually. See log for further information.</value>
  </data>
  <data name="ErrorCreatingRequiredDirectory" xml:space="preserve">
    <value>Could not create any of the default directories. Try running the process as Administrator, or create the directories in advance.</value>
  </data>
  <data name="ExportAlarmSourceDescription" xml:space="preserve">
    <value>Wertet eingehende Faxe aus, die in ein Verzeichnis auf dem lokalen PC geschrieben werden.</value>
  </data>
  <data name="ExportAlarmSourceDisplayName" xml:space="preserve">
    <value>Fax</value>
  </data>
  <data name="ExportTesseractOcrDescription" xml:space="preserve">
    <value>Benutzt Tesseract für Texterkennung.</value>
  </data>
  <data name="ExportTesseractOcrDisplayName" xml:space="preserve">
    <value>Tesseract</value>
  </data>
  <data name="InitializeUsingOcrSoftware" xml:space="preserve">
    <value>Using OCR software '{0}'.</value>
  </data>
  <data name="MoveFileAttemptError" xml:space="preserve">
    <value>Couldn't move file. Try {0} of {1}!</value>
  </data>
  <data name="MoveFileFailure" xml:space="preserve">
    <value>Couldn't move file! See log for more details.</value>
  </data>
  <data name="OcrSoftwareNotFoundError" xml:space="preserve">
    <value>The OCR software '{0}' was suggested to be found in path '{1}', which doesn't exist!</value>
  </data>
  <data name="OcrSoftwareParseBegin" xml:space="preserve">
    <value>Begin parsing of fax '{0}'...</value>
  </data>
  <data name="OcrSoftwareParseEndFail" xml:space="preserve">
    <value>Parsing failed! Please check the log for more details. The parsing of this fax will end because of possible missing information and/or inconsistencies.</value>
  </data>
  <data name="OcrSoftwareParseEndSuccess" xml:space="preserve">
    <value>Finished parsing in '{0}' milliseconds.</value>
  </data>
  <data name="ParsingOperationCompleted" xml:space="preserve">
    <value>Operation parsed in '{0}' milliseconds.</value>
  </data>
  <data name="ParsingTimestampFailedUsingCurrentTime" xml:space="preserve">
    <value>Could not parse timestamp from the fax. Using the current time as the timestamp.</value>
  </data>
  <data name="ProcessDataEvent" xml:space="preserve">
    <value>Process data event: {0}</value>
  </data>
  <data name="ProcessErrorEvent" xml:space="preserve">
    <value>Process error event: {0}</value>
  </data>
  <data name="ProcessingFaxesComplete" xml:space="preserve">
    <value>Processing finished.</value>
  </data>
  <data name="ProcessNewImageError" xml:space="preserve">
    <value>An exception occurred while processing the alarmfax!</value>
  </data>
  <data name="UsingAnalyzedFaxDirectory" xml:space="preserve">
    <value>Using directory '{0}' for analyzed faxes.</value>
  </data>
  <data name="UsingArchivedFaxDirectory" xml:space="preserve">
    <value>Using directory '{0}' for archived faxes.</value>
  </data>
  <data name="UsingIncomingFaxDirectory" xml:space="preserve">
    <value>Using directory '{0}' for incoming faxes.</value>
  </data>
  <data name="UsingParserTrace" xml:space="preserve">
    <value>Using parser '{0}'.</value>
  </data>
  <data name="GhostscriptConvert" xml:space="preserve">
    <value>Ghostscript convert '{0}' to tiff</value>
  </data>
  <data name="GhostscriptConvertError" xml:space="preserve">
    <value>Error using Ghostscript. Maybe it's not installed.</value>
  </data>
  <data name="FaxDirAccessError" xml:space="preserve">
    <value>Unable to access fax source directory '{0}'
{1}</value>
  </data>
</root>